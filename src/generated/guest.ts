// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: guest.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "guest";

export interface CheckInGuestRequest {
  firstName: string;
  lastName: string;
}

export interface CheckInGuestResponse {
  roomNumber: number;
}

export interface GetGuestRequest {
  lastName: string;
  roomNumber: number;
}

export interface IncrementWifiLoginCountRequest {
  lastName: string;
  roomNumber: number;
}

export interface IncrementWifiLoginCountResponse {
  success: boolean;
}

export interface Guest {
  id: string;
  firstName: string;
  lastName: string;
  roomNumber: number;
  wifiLoginCount: number;
}

function createBaseCheckInGuestRequest(): CheckInGuestRequest {
  return { firstName: "", lastName: "" };
}

export const CheckInGuestRequest: MessageFns<CheckInGuestRequest> = {
  encode(message: CheckInGuestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.firstName !== "") {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckInGuestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckInGuestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckInGuestRequest {
    return {
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
    };
  },

  toJSON(message: CheckInGuestRequest): unknown {
    const obj: any = {};
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckInGuestRequest>, I>>(base?: I): CheckInGuestRequest {
    return CheckInGuestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckInGuestRequest>, I>>(object: I): CheckInGuestRequest {
    const message = createBaseCheckInGuestRequest();
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    return message;
  },
};

function createBaseCheckInGuestResponse(): CheckInGuestResponse {
  return { roomNumber: 0 };
}

export const CheckInGuestResponse: MessageFns<CheckInGuestResponse> = {
  encode(message: CheckInGuestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomNumber !== 0) {
      writer.uint32(8).int32(message.roomNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckInGuestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckInGuestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.roomNumber = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckInGuestResponse {
    return { roomNumber: isSet(object.roomNumber) ? globalThis.Number(object.roomNumber) : 0 };
  },

  toJSON(message: CheckInGuestResponse): unknown {
    const obj: any = {};
    if (message.roomNumber !== 0) {
      obj.roomNumber = Math.round(message.roomNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckInGuestResponse>, I>>(base?: I): CheckInGuestResponse {
    return CheckInGuestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckInGuestResponse>, I>>(object: I): CheckInGuestResponse {
    const message = createBaseCheckInGuestResponse();
    message.roomNumber = object.roomNumber ?? 0;
    return message;
  },
};

function createBaseGetGuestRequest(): GetGuestRequest {
  return { lastName: "", roomNumber: 0 };
}

export const GetGuestRequest: MessageFns<GetGuestRequest> = {
  encode(message: GetGuestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastName !== "") {
      writer.uint32(10).string(message.lastName);
    }
    if (message.roomNumber !== 0) {
      writer.uint32(16).int32(message.roomNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGuestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGuestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.roomNumber = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGuestRequest {
    return {
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      roomNumber: isSet(object.roomNumber) ? globalThis.Number(object.roomNumber) : 0,
    };
  },

  toJSON(message: GetGuestRequest): unknown {
    const obj: any = {};
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.roomNumber !== 0) {
      obj.roomNumber = Math.round(message.roomNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGuestRequest>, I>>(base?: I): GetGuestRequest {
    return GetGuestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetGuestRequest>, I>>(object: I): GetGuestRequest {
    const message = createBaseGetGuestRequest();
    message.lastName = object.lastName ?? "";
    message.roomNumber = object.roomNumber ?? 0;
    return message;
  },
};

function createBaseIncrementWifiLoginCountRequest(): IncrementWifiLoginCountRequest {
  return { lastName: "", roomNumber: 0 };
}

export const IncrementWifiLoginCountRequest: MessageFns<IncrementWifiLoginCountRequest> = {
  encode(message: IncrementWifiLoginCountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastName !== "") {
      writer.uint32(10).string(message.lastName);
    }
    if (message.roomNumber !== 0) {
      writer.uint32(16).int32(message.roomNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncrementWifiLoginCountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncrementWifiLoginCountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.roomNumber = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncrementWifiLoginCountRequest {
    return {
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      roomNumber: isSet(object.roomNumber) ? globalThis.Number(object.roomNumber) : 0,
    };
  },

  toJSON(message: IncrementWifiLoginCountRequest): unknown {
    const obj: any = {};
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.roomNumber !== 0) {
      obj.roomNumber = Math.round(message.roomNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncrementWifiLoginCountRequest>, I>>(base?: I): IncrementWifiLoginCountRequest {
    return IncrementWifiLoginCountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncrementWifiLoginCountRequest>, I>>(
    object: I,
  ): IncrementWifiLoginCountRequest {
    const message = createBaseIncrementWifiLoginCountRequest();
    message.lastName = object.lastName ?? "";
    message.roomNumber = object.roomNumber ?? 0;
    return message;
  },
};

function createBaseIncrementWifiLoginCountResponse(): IncrementWifiLoginCountResponse {
  return { success: false };
}

export const IncrementWifiLoginCountResponse: MessageFns<IncrementWifiLoginCountResponse> = {
  encode(message: IncrementWifiLoginCountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncrementWifiLoginCountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncrementWifiLoginCountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncrementWifiLoginCountResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: IncrementWifiLoginCountResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncrementWifiLoginCountResponse>, I>>(base?: I): IncrementWifiLoginCountResponse {
    return IncrementWifiLoginCountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncrementWifiLoginCountResponse>, I>>(
    object: I,
  ): IncrementWifiLoginCountResponse {
    const message = createBaseIncrementWifiLoginCountResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseGuest(): Guest {
  return { id: "", firstName: "", lastName: "", roomNumber: 0, wifiLoginCount: 0 };
}

export const Guest: MessageFns<Guest> = {
  encode(message: Guest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.firstName !== "") {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(26).string(message.lastName);
    }
    if (message.roomNumber !== 0) {
      writer.uint32(32).int32(message.roomNumber);
    }
    if (message.wifiLoginCount !== 0) {
      writer.uint32(40).int32(message.wifiLoginCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Guest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGuest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.roomNumber = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.wifiLoginCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Guest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      roomNumber: isSet(object.roomNumber) ? globalThis.Number(object.roomNumber) : 0,
      wifiLoginCount: isSet(object.wifiLoginCount) ? globalThis.Number(object.wifiLoginCount) : 0,
    };
  },

  toJSON(message: Guest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.roomNumber !== 0) {
      obj.roomNumber = Math.round(message.roomNumber);
    }
    if (message.wifiLoginCount !== 0) {
      obj.wifiLoginCount = Math.round(message.wifiLoginCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Guest>, I>>(base?: I): Guest {
    return Guest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Guest>, I>>(object: I): Guest {
    const message = createBaseGuest();
    message.id = object.id ?? "";
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.roomNumber = object.roomNumber ?? 0;
    message.wifiLoginCount = object.wifiLoginCount ?? 0;
    return message;
  },
};

export type GuestServiceService = typeof GuestServiceService;
export const GuestServiceService = {
  checkInGuest: {
    path: "/guest.GuestService/CheckInGuest",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckInGuestRequest) => Buffer.from(CheckInGuestRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CheckInGuestRequest.decode(value),
    responseSerialize: (value: CheckInGuestResponse) => Buffer.from(CheckInGuestResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CheckInGuestResponse.decode(value),
  },
  getGuestByLastNameAndRoom: {
    path: "/guest.GuestService/GetGuestByLastNameAndRoom",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetGuestRequest) => Buffer.from(GetGuestRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetGuestRequest.decode(value),
    responseSerialize: (value: Guest) => Buffer.from(Guest.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Guest.decode(value),
  },
  incrementWifiLoginCount: {
    path: "/guest.GuestService/IncrementWifiLoginCount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IncrementWifiLoginCountRequest) =>
      Buffer.from(IncrementWifiLoginCountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => IncrementWifiLoginCountRequest.decode(value),
    responseSerialize: (value: IncrementWifiLoginCountResponse) =>
      Buffer.from(IncrementWifiLoginCountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => IncrementWifiLoginCountResponse.decode(value),
  },
} as const;

export interface GuestServiceServer extends UntypedServiceImplementation {
  checkInGuest: handleUnaryCall<CheckInGuestRequest, CheckInGuestResponse>;
  getGuestByLastNameAndRoom: handleUnaryCall<GetGuestRequest, Guest>;
  incrementWifiLoginCount: handleUnaryCall<IncrementWifiLoginCountRequest, IncrementWifiLoginCountResponse>;
}

export interface GuestServiceClient extends Client {
  checkInGuest(
    request: CheckInGuestRequest,
    callback: (error: ServiceError | null, response: CheckInGuestResponse) => void,
  ): ClientUnaryCall;
  checkInGuest(
    request: CheckInGuestRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckInGuestResponse) => void,
  ): ClientUnaryCall;
  checkInGuest(
    request: CheckInGuestRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckInGuestResponse) => void,
  ): ClientUnaryCall;
  getGuestByLastNameAndRoom(
    request: GetGuestRequest,
    callback: (error: ServiceError | null, response: Guest) => void,
  ): ClientUnaryCall;
  getGuestByLastNameAndRoom(
    request: GetGuestRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Guest) => void,
  ): ClientUnaryCall;
  getGuestByLastNameAndRoom(
    request: GetGuestRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Guest) => void,
  ): ClientUnaryCall;
  incrementWifiLoginCount(
    request: IncrementWifiLoginCountRequest,
    callback: (error: ServiceError | null, response: IncrementWifiLoginCountResponse) => void,
  ): ClientUnaryCall;
  incrementWifiLoginCount(
    request: IncrementWifiLoginCountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: IncrementWifiLoginCountResponse) => void,
  ): ClientUnaryCall;
  incrementWifiLoginCount(
    request: IncrementWifiLoginCountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: IncrementWifiLoginCountResponse) => void,
  ): ClientUnaryCall;
}

export const GuestServiceClient = makeGenericClientConstructor(
  GuestServiceService,
  "guest.GuestService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): GuestServiceClient;
  service: typeof GuestServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
